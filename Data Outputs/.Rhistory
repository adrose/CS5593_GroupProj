#
# })
output$covid_timeline <- renderPlot({
s_state <- data[, input$state]
ggplot(data, aes(x = X, y = s_state)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", colnames(data)[s_state])) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv")
# Processing data
data$X <- as.Date(data$X, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_state <- data[, input$state]
ggplot(data, aes(x = X, y = s_state)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", colname(s_state))) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv")
# Processing data
data$X <- as.Date(data$X, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_state <- data[, input$state]
ggplot(data, aes(x = X, y = s_state)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", colnames(s_state))) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
data$X <- as.Date(data$X, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_state <- data[, input$state]
ggplot(data, aes(x = X, y = s_state)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", colnames(s_state))) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
View(data)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_state <- data[, input$state]
ggplot(data, aes(x = Date, y = s_state)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", colnames(s_state))) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_state <- data[, input$state]
ggplot(data, aes(x = Date, y = s_state)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", colnames(data)[s_state]) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_state <- data[, input$state]
ggplot(data, aes(x = Date, y = s_state)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", s_state)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_data <- data[, input$state]
s_name <- colnames(data[, input$state])
ggplot(data, aes(x = Date, y = s_data)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", s_name)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_data <- data[, input$state]
s_name <- colnames(data[, input$state])
print(s_data)
ggplot(data, aes(x = Date, y = s_data)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", s_name)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_data <- data[, input$state]
s_name <- colnames(data[, input$state])
print(s_name)
ggplot(data, aes(x = Date, y = s_data)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", s_name)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_data <- data[, input$state]
print(input$state)
ggplot(data, aes(x = Date, y = s_data)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", s_name)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
s_data <- data[, input$state]
ggplot(data, aes(x = Date, y = s_data)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", input$state)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
View(data)
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
print(dates)
state_data <- data[, input$state]
ggplot(data, aes(x = Date, y = state_data)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", input$state)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
new_data[timeline, ]
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
# Libraries used
library(shiny)
library(shinydashboard)
library(ggplot2)
# Defining work environments
dashboard_location <- getwd()
base_location <- dirname(getwd())
data_location <- paste0(base_location, "/Data Outputs")
# Loading data
setwd(data_location)
data <- read.csv("combined_processed_data.csv", check.names = FALSE)
# Processing data
colnames(data)[1] <- "Date"
data$Date <- as.Date(data$Date, format = "%m/%d/%y")
# Source UI
setwd(dashboard_location)
ui <- source("ui.R")
# ----------------------------------------------------------------------
# Defining backend functionality
server <- function(input, output){
# output$data <- renderTable({
#
#   data[, input$state]
#
# })
output$covid_timeline <- renderPlot({
timeline <- seq(from = input$timeline_date[1], to = input$timeline_date[2],
by = "day")
state_data <- data[timeline %in% data$Date, input$timeline_state]
print(state_data)
new_data <- cbind(Date = timeline, State = state_data)
# state_data <- data[, input$timeline_state]
ggplot(new_data, aes(x = Date, y = State)) + geom_line() +
ggtitle(paste0("Daily confirmed cases in ", input$timeline_state)) +
xlab("Date") + ylab("Confirmed cases")
})
}
# Loading the dashboard
shinyApp(ui, server)
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
new_data <- data[data$Date %in% timeline, ]
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
runApp('F:/2. PhD/2. Github/CS5593_GroupProj/Dashboard')
